nohup: ignoring input
Standard Commons Logging discovery in action with spring-jcl: please remove commons-logging.jar from classpath in order to avoid potential conflicts

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.5.0)

2025-05-28T21:00:00.284+09:00  INFO 221926 --- [backend] [           main] com.example.backend.BackendApplication   : Starting BackendApplication v0.0.1-SNAPSHOT using Java 21.0.7 with PID 221926 (/home/jun/oss-basic/backend/build/libs/backend-0.0.1-SNAPSHOT.jar started by jun in /home/jun/oss-basic/backend)
2025-05-28T21:00:00.286+09:00  INFO 221926 --- [backend] [           main] com.example.backend.BackendApplication   : No active profile set, falling back to 1 default profile: "default"
2025-05-28T21:00:00.906+09:00  INFO 221926 --- [backend] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2025-05-28T21:00:00.955+09:00  INFO 221926 --- [backend] [           main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 42 ms. Found 7 JPA repository interfaces.
2025-05-28T21:00:01.393+09:00  INFO 221926 --- [backend] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port 8080 (http)
2025-05-28T21:00:01.410+09:00  INFO 221926 --- [backend] [           main] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2025-05-28T21:00:01.411+09:00  INFO 221926 --- [backend] [           main] o.apache.catalina.core.StandardEngine    : Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-05-28T21:00:01.431+09:00  INFO 221926 --- [backend] [           main] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2025-05-28T21:00:01.432+09:00  INFO 221926 --- [backend] [           main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1108 ms
Standard Commons Logging discovery in action with spring-jcl: please remove commons-logging.jar from classpath in order to avoid potential conflicts
2025-05-28T21:00:01.629+09:00  INFO 221926 --- [backend] [           main] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2025-05-28T21:00:01.669+09:00  INFO 221926 --- [backend] [           main] org.hibernate.Version                    : HHH000412: Hibernate ORM core version 6.6.15.Final
2025-05-28T21:00:01.698+09:00  INFO 221926 --- [backend] [           main] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2025-05-28T21:00:01.895+09:00  INFO 221926 --- [backend] [           main] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2025-05-28T21:00:01.915+09:00  INFO 221926 --- [backend] [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...
2025-05-28T21:00:02.018+09:00  INFO 221926 --- [backend] [           main] com.zaxxer.hikari.pool.HikariPool        : HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@604c7e9b
2025-05-28T21:00:02.019+09:00  INFO 221926 --- [backend] [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.
2025-05-28T21:00:02.067+09:00  INFO 221926 --- [backend] [           main] org.hibernate.orm.connections.pooling    : HHH10001005: Database info:
	Database JDBC URL [Connecting through datasource 'HikariDataSource (HikariPool-1)']
	Database driver: undefined/unknown
	Database version: 8.0.42
	Autocommit mode: undefined/unknown
	Isolation level: undefined/unknown
	Minimum pool size: undefined/unknown
	Maximum pool size: undefined/unknown
2025-05-28T21:00:02.669+09:00  INFO 221926 --- [backend] [           main] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: 
    alter table inventory 
       drop 
       foreign key FK9j31pqbk5fp1p5dtjjbmfvv1h
Hibernate: 
    alter table inventory_item 
       drop 
       foreign key FKk5dyq25q0q8qyxr17iw854bqm
Hibernate: 
    alter table parsed_item 
       drop 
       foreign key FKmelbfdxnqi20sidmhye7fxv0s
Hibernate: 
    alter table receipt 
       drop 
       foreign key FK9llbb4mj9qe5l0krj2ro35u51
Hibernate: 
    alter table recipe 
       drop 
       foreign key FK5mx01yw4j003wisa2aqmwir6l
Hibernate: 
    alter table recipe_source_item 
       drop 
       foreign key FKkn60iq4ch0hskwbn713qqscb5
Hibernate: 
    alter table recipe_source_item 
       drop 
       foreign key FKd3kd66ddxvbfvxkh4plub9vn4
Hibernate: 
    drop table if exists inventory
Hibernate: 
    drop table if exists inventory_item
Hibernate: 
    drop table if exists parsed_item
Hibernate: 
    drop table if exists receipt
Hibernate: 
    drop table if exists recipe
Hibernate: 
    drop table if exists recipe_source_item
Hibernate: 
    drop table if exists users
Hibernate: 
    create table inventory (
        created_at datetime(6),
        inventory_id bigint not null auto_increment,
        user_user_id bigint not null,
        inventory_name varchar(255) not null,
        primary key (inventory_id)
    ) engine=InnoDB
Hibernate: 
    create table inventory_item (
        expiration_date date,
        quantity integer not null,
        added_at datetime(6),
        inventory_id bigint,
        item_id bigint not null auto_increment,
        item_name varchar(255) not null,
        storage_type enum ('freezer','fridge') not null,
        primary key (item_id)
    ) engine=InnoDB
Hibernate: 
    create table parsed_item (
        quantity integer,
        parsed_item_id bigint not null auto_increment,
        receipt_id bigint,
        item_name varchar(255),
        primary key (parsed_item_id)
    ) engine=InnoDB
Hibernate: 
    create table receipt (
        receipt_id bigint not null auto_increment,
        uploaded_at datetime(6),
        user_id bigint,
        image_url TEXT not null,
        primary key (receipt_id)
    ) engine=InnoDB
Hibernate: 
    create table recipe (
        created_at datetime(6),
        recipe_id bigint not null auto_increment,
        user_id bigint not null,
        content TEXT not null,
        title varchar(255) not null,
        primary key (recipe_id)
    ) engine=InnoDB
Hibernate: 
    create table recipe_source_item (
        id bigint not null auto_increment,
        item_id bigint,
        recipe_id bigint,
        primary key (id)
    ) engine=InnoDB
Hibernate: 
    create table users (
        created_at datetime(6),
        user_id bigint not null auto_increment,
        email varchar(255) not null,
        nickname varchar(255) not null,
        password varchar(255) not null,
        primary key (user_id)
    ) engine=InnoDB
Hibernate: 
    alter table users 
       add constraint UK6dotkott2kjsp8vw4d0m25fb7 unique (email)
Hibernate: 
    alter table inventory 
       add constraint FK9j31pqbk5fp1p5dtjjbmfvv1h 
       foreign key (user_user_id) 
       references users (user_id)
Hibernate: 
    alter table inventory_item 
       add constraint FKk5dyq25q0q8qyxr17iw854bqm 
       foreign key (inventory_id) 
       references inventory (inventory_id)
Hibernate: 
    alter table parsed_item 
       add constraint FKmelbfdxnqi20sidmhye7fxv0s 
       foreign key (receipt_id) 
       references receipt (receipt_id)
Hibernate: 
    alter table receipt 
       add constraint FK9llbb4mj9qe5l0krj2ro35u51 
       foreign key (user_id) 
       references users (user_id)
Hibernate: 
    alter table recipe 
       add constraint FK5mx01yw4j003wisa2aqmwir6l 
       foreign key (user_id) 
       references users (user_id)
Hibernate: 
    alter table recipe_source_item 
       add constraint FKkn60iq4ch0hskwbn713qqscb5 
       foreign key (item_id) 
       references inventory_item (item_id)
Hibernate: 
    alter table recipe_source_item 
       add constraint FKd3kd66ddxvbfvxkh4plub9vn4 
       foreign key (recipe_id) 
       references recipe (recipe_id)
2025-05-28T21:00:04.343+09:00  INFO 221926 --- [backend] [           main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2025-05-28T21:00:04.758+09:00  WARN 221926 --- [backend] [           main] JpaBaseConfiguration$JpaWebConfiguration : spring.jpa.open-in-view is enabled by default. Therefore, database queries may be performed during view rendering. Explicitly configure spring.jpa.open-in-view to disable this warning
2025-05-28T21:00:04.783+09:00  INFO 221926 --- [backend] [           main] r$InitializeUserDetailsManagerConfigurer : Global AuthenticationManager configured with UserDetailsService bean with name customUserDetailsService
2025-05-28T21:00:05.155+09:00  INFO 221926 --- [backend] [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 (http) with context path '/'
2025-05-28T21:00:05.165+09:00  INFO 221926 --- [backend] [           main] com.example.backend.BackendApplication   : Started BackendApplication in 5.204 seconds (process running for 5.544)
2025-05-28T21:00:26.411+09:00  INFO 221926 --- [backend] [nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-05-28T21:00:26.411+09:00  INFO 221926 --- [backend] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2025-05-28T21:00:26.412+09:00  INFO 221926 --- [backend] [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 1 ms
Hibernate: 
    select
        u1_0.user_id 
    from
        users u1_0 
    where
        u1_0.email=? 
    limit
        ?
Hibernate: 
    insert 
    into
        users
        (created_at, email, nickname, password) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
2025-05-28T21:00:52.759+09:00  WARN 221926 --- [backend] [nio-8080-exec-8] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Method parameter 'inventoryId': Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; For input string: "undefined"]
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
2025-05-28T21:01:24.827+09:00  WARN 221926 --- [backend] [nio-8080-exec-4] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Method parameter 'inventoryId': Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; For input string: "undefined"]
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    insert 
    into
        inventory
        (created_at, inventory_name, user_user_id) 
    values
        (?, ?, ?)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    insert 
    into
        inventory_item
        (added_at, expiration_date, inventory_id, item_name, quantity, storage_type) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    left join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        ii1_0.item_id=?
Hibernate: 
    update
        inventory_item 
    set
        added_at=?,
        expiration_date=?,
        inventory_id=?,
        item_name=?,
        quantity=?,
        storage_type=? 
    where
        item_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    left join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        ii1_0.item_id=?
Hibernate: 
    select
        uir1_0.item_id,
        uir1_0.id,
        r1_0.recipe_id,
        r1_0.content,
        r1_0.created_at,
        r1_0.title,
        r1_0.user_id 
    from
        recipe_source_item uir1_0 
    left join
        recipe r1_0 
            on r1_0.recipe_id=uir1_0.recipe_id 
    where
        uir1_0.item_id=?
Hibernate: 
    delete 
    from
        inventory_item 
    where
        item_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    update
        inventory 
    set
        created_at=?,
        inventory_name=?,
        user_user_id=? 
    where
        inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.item_id,
        i1_0.added_at,
        i1_0.expiration_date,
        i1_0.item_name,
        i1_0.quantity,
        i1_0.storage_type 
    from
        inventory_item i1_0 
    where
        i1_0.inventory_id=?
Hibernate: 
    delete 
    from
        inventory 
    where
        inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    insert 
    into
        inventory
        (created_at, inventory_name, user_user_id) 
    values
        (?, ?, ?)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    insert 
    into
        inventory_item
        (added_at, expiration_date, inventory_id, item_name, quantity, storage_type) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    left join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        ii1_0.item_id=?
Hibernate: 
    update
        inventory_item 
    set
        added_at=?,
        expiration_date=?,
        inventory_id=?,
        item_name=?,
        quantity=?,
        storage_type=? 
    where
        item_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    left join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        ii1_0.item_id=?
Hibernate: 
    select
        uir1_0.item_id,
        uir1_0.id,
        r1_0.recipe_id,
        r1_0.content,
        r1_0.created_at,
        r1_0.title,
        r1_0.user_id 
    from
        recipe_source_item uir1_0 
    left join
        recipe r1_0 
            on r1_0.recipe_id=uir1_0.recipe_id 
    where
        uir1_0.item_id=?
Hibernate: 
    delete 
    from
        inventory_item 
    where
        item_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    insert 
    into
        receipt
        (image_url, uploaded_at, user_id) 
    values
        (?, ?, ?)
OCR 결과 JSON:
{"version":"V2","requestId":"12ee8467-bd90-42b8-b476-20ed064365e5","timestamp":1748434569712,"images":[{"uid":"dafbdb52cd0849ebafef11fbf4efdd51","name":"receipt","inferResult":"SUCCESS","message":"SUCCESS","validationResult":{"result":"NO_REQUESTED"},"convertedImageInfo":{"width":920,"height":550,"pageIndex":0,"longImage":false},"fields":[{"valueType":"ALL","boundingPoly":{"vertices":[{"x":37.0,"y":33.0},{"x":103.0,"y":33.0},{"x":103.0,"y":67.0},{"x":37.0,"y":67.0}]},"inferText":"001","inferConfidence":1.0,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":29.0},{"x":412.0,"y":29.0},{"x":412.0,"y":71.0},{"x":131.0,"y":71.0}]},"inferText":"더건강한샌드위치햄","inferConfidence":0.9997,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":592.0,"y":36.0},{"x":611.0,"y":36.0},{"x":611.0,"y":63.0},{"x":592.0,"y":63.0}]},"inferText":"1","inferConfidence":0.9999,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":721.0,"y":30.0},{"x":847.0,"y":30.0},{"x":847.0,"y":68.0},{"x":721.0,"y":68.0}]},"inferText":"2,190원","inferConfidence":0.9999,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":76.0},{"x":389.0,"y":75.0},{"x":389.0,"y":111.0},{"x":131.0,"y":112.0}]},"inferText":"2000114202946","inferConfidence":1.0,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":36.0,"y":120.0},{"x":104.0,"y":120.0},{"x":104.0,"y":154.0},{"x":36.0,"y":154.0}]},"inferText":"002","inferConfidence":1.0,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":108.0,"y":122.0},{"x":124.0,"y":122.0},{"x":124.0,"y":137.0},{"x":108.0,"y":137.0}]},"inferText":"*","inferConfidence":0.9986,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":117.0},{"x":348.0,"y":117.0},{"x":348.0,"y":158.0},{"x":131.0,"y":158.0}]},"inferText":"재사용봉투20L","inferConfidence":0.9998,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":752.0,"y":118.0},{"x":846.0,"y":118.0},{"x":846.0,"y":156.0},{"x":752.0,"y":156.0}]},"inferText":"850원","inferConfidence":0.9999,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":593.0,"y":124.0},{"x":611.0,"y":124.0},{"x":611.0,"y":150.0},{"x":593.0,"y":150.0}]},"inferText":"1","inferConfidence":0.9999,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":164.0},{"x":389.0,"y":164.0},{"x":389.0,"y":200.0},{"x":131.0,"y":200.0}]},"inferText":"2000113844445","inferConfidence":0.9995,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":36.0,"y":207.0},{"x":103.0,"y":207.0},{"x":103.0,"y":242.0},{"x":36.0,"y":242.0}]},"inferText":"003","inferConfidence":1.0,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":132.0,"y":205.0},{"x":462.0,"y":205.0},{"x":462.0,"y":246.0},{"x":132.0,"y":246.0}]},"inferText":"서울체다SLICE치즈20","inferConfidence":0.9999,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":593.0,"y":212.0},{"x":611.0,"y":212.0},{"x":611.0,"y":238.0},{"x":593.0,"y":238.0}]},"inferText":"1","inferConfidence":0.9999,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":723.0,"y":205.0},{"x":844.0,"y":205.0},{"x":844.0,"y":244.0},{"x":723.0,"y":244.0}]},"inferText":"3,690원","inferConfidence":0.9992,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":252.0},{"x":392.0,"y":251.0},{"x":392.0,"y":287.0},{"x":131.0,"y":288.0}]},"inferText":"2000000017574","inferConfidence":0.9995,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":36.0,"y":295.0},{"x":103.0,"y":295.0},{"x":103.0,"y":330.0},{"x":36.0,"y":330.0}]},"inferText":"004","inferConfidence":1.0,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":293.0},{"x":426.0,"y":293.0},{"x":426.0,"y":336.0},{"x":131.0,"y":336.0}]},"inferText":"The좋은버터롤(8입)","inferConfidence":0.9999,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":593.0,"y":299.0},{"x":611.0,"y":299.0},{"x":611.0,"y":327.0},{"x":593.0,"y":327.0}]},"inferText":"1","inferConfidence":0.9999,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":723.0,"y":293.0},{"x":846.0,"y":293.0},{"x":846.0,"y":332.0},{"x":723.0,"y":332.0}]},"inferText":"3,290원","inferConfidence":0.997,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":340.0},{"x":393.0,"y":339.0},{"x":393.0,"y":374.0},{"x":131.0,"y":375.0}]},"inferText":"2000059581753","inferConfidence":0.9999,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":36.0,"y":382.0},{"x":105.0,"y":382.0},{"x":105.0,"y":419.0},{"x":36.0,"y":419.0}]},"inferText":"005","inferConfidence":1.0,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":108.0,"y":384.0},{"x":125.0,"y":384.0},{"x":125.0,"y":401.0},{"x":108.0,"y":401.0}]},"inferText":"*","inferConfidence":0.9997,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":380.0},{"x":382.0,"y":380.0},{"x":382.0,"y":421.0},{"x":131.0,"y":421.0}]},"inferText":"속편한우유저지방","inferConfidence":1.0,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":721.0,"y":381.0},{"x":847.0,"y":381.0},{"x":847.0,"y":420.0},{"x":721.0,"y":420.0}]},"inferText":"4,280원","inferConfidence":0.9993,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":593.0,"y":387.0},{"x":611.0,"y":387.0},{"x":611.0,"y":414.0},{"x":593.0,"y":414.0}]},"inferText":"1","inferConfidence":0.9999,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":427.0},{"x":392.0,"y":427.0},{"x":392.0,"y":462.0},{"x":131.0,"y":462.0}]},"inferText":"2000129100273","inferConfidence":0.9998,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":36.0,"y":470.0},{"x":104.0,"y":470.0},{"x":104.0,"y":507.0},{"x":36.0,"y":507.0}]},"inferText":"006","inferConfidence":1.0,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":467.0},{"x":291.0,"y":467.0},{"x":291.0,"y":510.0},{"x":131.0,"y":510.0}]},"inferText":"주부초밥짱","inferConfidence":0.9998,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":592.0,"y":474.0},{"x":612.0,"y":474.0},{"x":612.0,"y":503.0},{"x":592.0,"y":503.0}]},"inferText":"1","inferConfidence":0.9999,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":723.0,"y":468.0},{"x":844.0,"y":468.0},{"x":844.0,"y":507.0},{"x":723.0,"y":507.0}]},"inferText":"3,290원","inferConfidence":0.9968,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":515.0},{"x":392.0,"y":515.0},{"x":392.0,"y":550.0},{"x":131.0,"y":550.0}]},"inferText":"2000121938498","inferConfidence":0.9997,"type":"NORMAL","lineBreak":true}]}]}
Hibernate: 
    insert 
    into
        parsed_item
        (item_name, quantity, receipt_id) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        parsed_item
        (item_name, quantity, receipt_id) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        parsed_item
        (item_name, quantity, receipt_id) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        parsed_item
        (item_name, quantity, receipt_id) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        parsed_item
        (item_name, quantity, receipt_id) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        parsed_item
        (item_name, quantity, receipt_id) 
    values
        (?, ?, ?)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        pi1_0.parsed_item_id,
        pi1_0.item_name,
        pi1_0.quantity,
        pi1_0.receipt_id 
    from
        parsed_item pi1_0 
    left join
        receipt r1_0 
            on r1_0.receipt_id=pi1_0.receipt_id 
    where
        r1_0.receipt_id=?
Hibernate: 
    select
        r1_0.receipt_id,
        r1_0.image_url,
        r1_0.uploaded_at,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        receipt r1_0 
    left join
        users u1_0 
            on u1_0.user_id=r1_0.user_id 
    where
        r1_0.receipt_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    insert 
    into
        inventory_item
        (added_at, expiration_date, inventory_id, item_name, quantity, storage_type) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        inventory_item
        (added_at, expiration_date, inventory_id, item_name, quantity, storage_type) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        inventory_item
        (added_at, expiration_date, inventory_id, item_name, quantity, storage_type) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        inventory_item
        (added_at, expiration_date, inventory_id, item_name, quantity, storage_type) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        inventory_item
        (added_at, expiration_date, inventory_id, item_name, quantity, storage_type) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        r1_0.recipe_id,
        r1_0.content,
        r1_0.created_at,
        r1_0.title,
        r1_0.user_id 
    from
        recipe r1_0 
    where
        r1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    insert 
    into
        recipe
        (content, created_at, title, user_id) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        r1_0.recipe_id,
        r1_0.content,
        r1_0.created_at,
        r1_0.title,
        r1_0.user_id 
    from
        recipe r1_0 
    where
        r1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        r1_0.recipe_id,
        r1_0.content,
        r1_0.created_at,
        r1_0.title,
        r1_0.user_id 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=? 
        and r1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        r1_0.recipe_id,
        r1_0.content,
        r1_0.created_at,
        r1_0.title,
        r1_0.user_id 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=? 
        and r1_0.user_id=?
Hibernate: 
    delete 
    from
        recipe 
    where
        recipe_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        r1_0.recipe_id,
        r1_0.content,
        r1_0.created_at,
        r1_0.title,
        r1_0.user_id 
    from
        recipe r1_0 
    where
        r1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
2025-05-28T22:08:14.277+09:00 ERROR 221926 --- [backend] [io-8080-exec-10] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.RuntimeException: 존재하지 않는 계정입니다.] with root cause

java.lang.RuntimeException: 존재하지 않는 계정입니다.
	at com.example.backend.service.UserService.lambda$login$0(UserService.java:35) ~[!/:0.0.1-SNAPSHOT]
	at java.base/java.util.Optional.orElseThrow(Optional.java:403) ~[na:na]
	at com.example.backend.service.UserService.login(UserService.java:35) ~[!/:0.0.1-SNAPSHOT]
	at com.example.backend.controller.AuthController.login(AuthController.java:32) ~[!/:0.0.1-SNAPSHOT]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at com.example.backend.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:32) ~[!/:0.0.1-SNAPSHOT]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319) ~[spring-security-config-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240) ~[spring-security-config-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at java.base/java.lang.Thread.run(Thread.java:1583) ~[na:na]

Hibernate: 
    select
        u1_0.user_id 
    from
        users u1_0 
    where
        u1_0.email=? 
    limit
        ?
Hibernate: 
    insert 
    into
        users
        (created_at, email, nickname, password) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
2025-05-28T22:08:37.654+09:00  WARN 221926 --- [backend] [nio-8080-exec-6] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Method parameter 'inventoryId': Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; For input string: "undefined"]
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        r1_0.recipe_id,
        r1_0.content,
        r1_0.created_at,
        r1_0.title,
        r1_0.user_id 
    from
        recipe r1_0 
    where
        r1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        r1_0.recipe_id,
        r1_0.content,
        r1_0.created_at,
        r1_0.title,
        r1_0.user_id 
    from
        recipe r1_0 
    where
        r1_0.user_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        r1_0.recipe_id,
        r1_0.content,
        r1_0.created_at,
        r1_0.title,
        r1_0.user_id 
    from
        recipe r1_0 
    where
        r1_0.user_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
2025-05-28T22:09:11.502+09:00  WARN 221926 --- [backend] [nio-8080-exec-7] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Method parameter 'inventoryId': Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; For input string: "undefined"]
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    insert 
    into
        inventory
        (created_at, inventory_name, user_user_id) 
    values
        (?, ?, ?)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    insert 
    into
        receipt
        (image_url, uploaded_at, user_id) 
    values
        (?, ?, ?)
OCR 결과 JSON:
{"version":"V2","requestId":"2b0a3bb4-49a1-4279-8d77-d5217bbfd159","timestamp":1748437898288,"images":[{"uid":"70bd779709814084a69bb924e2d7f048","name":"receipt","inferResult":"SUCCESS","message":"SUCCESS","validationResult":{"result":"NO_REQUESTED"},"convertedImageInfo":{"width":920,"height":550,"pageIndex":0,"longImage":false},"fields":[{"valueType":"ALL","boundingPoly":{"vertices":[{"x":37.0,"y":33.0},{"x":103.0,"y":33.0},{"x":103.0,"y":67.0},{"x":37.0,"y":67.0}]},"inferText":"001","inferConfidence":1.0,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":29.0},{"x":412.0,"y":29.0},{"x":412.0,"y":71.0},{"x":131.0,"y":71.0}]},"inferText":"더건강한샌드위치햄","inferConfidence":0.9997,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":592.0,"y":36.0},{"x":611.0,"y":36.0},{"x":611.0,"y":63.0},{"x":592.0,"y":63.0}]},"inferText":"1","inferConfidence":0.9999,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":721.0,"y":30.0},{"x":847.0,"y":30.0},{"x":847.0,"y":68.0},{"x":721.0,"y":68.0}]},"inferText":"2,190원","inferConfidence":0.9999,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":76.0},{"x":389.0,"y":75.0},{"x":389.0,"y":111.0},{"x":131.0,"y":112.0}]},"inferText":"2000114202946","inferConfidence":1.0,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":36.0,"y":120.0},{"x":104.0,"y":120.0},{"x":104.0,"y":154.0},{"x":36.0,"y":154.0}]},"inferText":"002","inferConfidence":1.0,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":108.0,"y":122.0},{"x":124.0,"y":122.0},{"x":124.0,"y":137.0},{"x":108.0,"y":137.0}]},"inferText":"*","inferConfidence":0.9986,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":117.0},{"x":348.0,"y":117.0},{"x":348.0,"y":158.0},{"x":131.0,"y":158.0}]},"inferText":"재사용봉투20L","inferConfidence":0.9998,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":752.0,"y":118.0},{"x":846.0,"y":118.0},{"x":846.0,"y":156.0},{"x":752.0,"y":156.0}]},"inferText":"850원","inferConfidence":0.9999,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":593.0,"y":124.0},{"x":611.0,"y":124.0},{"x":611.0,"y":150.0},{"x":593.0,"y":150.0}]},"inferText":"1","inferConfidence":0.9999,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":164.0},{"x":389.0,"y":164.0},{"x":389.0,"y":200.0},{"x":131.0,"y":200.0}]},"inferText":"2000113844445","inferConfidence":0.9995,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":36.0,"y":207.0},{"x":103.0,"y":207.0},{"x":103.0,"y":242.0},{"x":36.0,"y":242.0}]},"inferText":"003","inferConfidence":1.0,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":132.0,"y":205.0},{"x":462.0,"y":205.0},{"x":462.0,"y":246.0},{"x":132.0,"y":246.0}]},"inferText":"서울체다SLICE치즈20","inferConfidence":0.9999,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":593.0,"y":212.0},{"x":611.0,"y":212.0},{"x":611.0,"y":238.0},{"x":593.0,"y":238.0}]},"inferText":"1","inferConfidence":0.9999,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":723.0,"y":205.0},{"x":844.0,"y":205.0},{"x":844.0,"y":244.0},{"x":723.0,"y":244.0}]},"inferText":"3,690원","inferConfidence":0.9992,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":252.0},{"x":392.0,"y":251.0},{"x":392.0,"y":287.0},{"x":131.0,"y":288.0}]},"inferText":"2000000017574","inferConfidence":0.9995,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":36.0,"y":295.0},{"x":103.0,"y":295.0},{"x":103.0,"y":330.0},{"x":36.0,"y":330.0}]},"inferText":"004","inferConfidence":1.0,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":293.0},{"x":426.0,"y":293.0},{"x":426.0,"y":336.0},{"x":131.0,"y":336.0}]},"inferText":"The좋은버터롤(8입)","inferConfidence":0.9999,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":593.0,"y":299.0},{"x":611.0,"y":299.0},{"x":611.0,"y":327.0},{"x":593.0,"y":327.0}]},"inferText":"1","inferConfidence":0.9999,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":723.0,"y":293.0},{"x":846.0,"y":293.0},{"x":846.0,"y":332.0},{"x":723.0,"y":332.0}]},"inferText":"3,290원","inferConfidence":0.997,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":340.0},{"x":393.0,"y":339.0},{"x":393.0,"y":374.0},{"x":131.0,"y":375.0}]},"inferText":"2000059581753","inferConfidence":0.9999,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":36.0,"y":382.0},{"x":105.0,"y":382.0},{"x":105.0,"y":419.0},{"x":36.0,"y":419.0}]},"inferText":"005","inferConfidence":1.0,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":108.0,"y":384.0},{"x":125.0,"y":384.0},{"x":125.0,"y":401.0},{"x":108.0,"y":401.0}]},"inferText":"*","inferConfidence":0.9997,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":380.0},{"x":382.0,"y":380.0},{"x":382.0,"y":421.0},{"x":131.0,"y":421.0}]},"inferText":"속편한우유저지방","inferConfidence":1.0,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":721.0,"y":381.0},{"x":847.0,"y":381.0},{"x":847.0,"y":420.0},{"x":721.0,"y":420.0}]},"inferText":"4,280원","inferConfidence":0.9993,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":593.0,"y":387.0},{"x":611.0,"y":387.0},{"x":611.0,"y":414.0},{"x":593.0,"y":414.0}]},"inferText":"1","inferConfidence":0.9999,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":427.0},{"x":392.0,"y":427.0},{"x":392.0,"y":462.0},{"x":131.0,"y":462.0}]},"inferText":"2000129100273","inferConfidence":0.9998,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":36.0,"y":470.0},{"x":104.0,"y":470.0},{"x":104.0,"y":507.0},{"x":36.0,"y":507.0}]},"inferText":"006","inferConfidence":1.0,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":467.0},{"x":291.0,"y":467.0},{"x":291.0,"y":510.0},{"x":131.0,"y":510.0}]},"inferText":"주부초밥짱","inferConfidence":0.9998,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":592.0,"y":474.0},{"x":612.0,"y":474.0},{"x":612.0,"y":503.0},{"x":592.0,"y":503.0}]},"inferText":"1","inferConfidence":0.9999,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":723.0,"y":468.0},{"x":844.0,"y":468.0},{"x":844.0,"y":507.0},{"x":723.0,"y":507.0}]},"inferText":"3,290원","inferConfidence":0.9968,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":515.0},{"x":392.0,"y":515.0},{"x":392.0,"y":550.0},{"x":131.0,"y":550.0}]},"inferText":"2000121938498","inferConfidence":0.9997,"type":"NORMAL","lineBreak":true}]}]}
Hibernate: 
    insert 
    into
        parsed_item
        (item_name, quantity, receipt_id) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        parsed_item
        (item_name, quantity, receipt_id) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        parsed_item
        (item_name, quantity, receipt_id) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        parsed_item
        (item_name, quantity, receipt_id) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        parsed_item
        (item_name, quantity, receipt_id) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        parsed_item
        (item_name, quantity, receipt_id) 
    values
        (?, ?, ?)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        pi1_0.parsed_item_id,
        pi1_0.item_name,
        pi1_0.quantity,
        pi1_0.receipt_id 
    from
        parsed_item pi1_0 
    left join
        receipt r1_0 
            on r1_0.receipt_id=pi1_0.receipt_id 
    where
        r1_0.receipt_id=?
Hibernate: 
    select
        r1_0.receipt_id,
        r1_0.image_url,
        r1_0.uploaded_at,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        receipt r1_0 
    left join
        users u1_0 
            on u1_0.user_id=r1_0.user_id 
    where
        r1_0.receipt_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
2025-05-28T22:12:17.621+09:00 ERROR 221926 --- [backend] [io-8080-exec-10] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.IllegalArgumentException: No enum constant com.example.backend.entity.StorageType.] with root cause

java.lang.IllegalArgumentException: No enum constant com.example.backend.entity.StorageType.
	at java.base/java.lang.Enum.valueOf(Enum.java:293) ~[na:na]
	at com.example.backend.entity.StorageType.valueOf(StorageType.java:3) ~[!/:0.0.1-SNAPSHOT]
	at com.example.backend.service.InventoryItemService.createItem(InventoryItemService.java:32) ~[!/:0.0.1-SNAPSHOT]
	at com.example.backend.controller.InventoryItemController.createItem(InventoryItemController.java:31) ~[!/:0.0.1-SNAPSHOT]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at com.example.backend.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:32) ~[!/:0.0.1-SNAPSHOT]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319) ~[spring-security-config-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240) ~[spring-security-config-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at java.base/java.lang.Thread.run(Thread.java:1583) ~[na:na]

Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
2025-05-28T22:12:17.702+09:00 ERROR 221926 --- [backend] [nio-8080-exec-5] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.IllegalArgumentException: No enum constant com.example.backend.entity.StorageType.] with root cause

java.lang.IllegalArgumentException: No enum constant com.example.backend.entity.StorageType.
	at java.base/java.lang.Enum.valueOf(Enum.java:293) ~[na:na]
	at com.example.backend.entity.StorageType.valueOf(StorageType.java:3) ~[!/:0.0.1-SNAPSHOT]
	at com.example.backend.service.InventoryItemService.createItem(InventoryItemService.java:32) ~[!/:0.0.1-SNAPSHOT]
	at com.example.backend.controller.InventoryItemController.createItem(InventoryItemController.java:31) ~[!/:0.0.1-SNAPSHOT]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at com.example.backend.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:32) ~[!/:0.0.1-SNAPSHOT]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319) ~[spring-security-config-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240) ~[spring-security-config-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at java.base/java.lang.Thread.run(Thread.java:1583) ~[na:na]

2025-05-28T22:12:17.702+09:00 ERROR 221926 --- [backend] [nio-8080-exec-4] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.IllegalArgumentException: No enum constant com.example.backend.entity.StorageType.] with root cause

java.lang.IllegalArgumentException: No enum constant com.example.backend.entity.StorageType.
	at java.base/java.lang.Enum.valueOf(Enum.java:293) ~[na:na]
	at com.example.backend.entity.StorageType.valueOf(StorageType.java:3) ~[!/:0.0.1-SNAPSHOT]
	at com.example.backend.service.InventoryItemService.createItem(InventoryItemService.java:32) ~[!/:0.0.1-SNAPSHOT]
	at com.example.backend.controller.InventoryItemController.createItem(InventoryItemController.java:31) ~[!/:0.0.1-SNAPSHOT]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at com.example.backend.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:32) ~[!/:0.0.1-SNAPSHOT]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319) ~[spring-security-config-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240) ~[spring-security-config-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at java.base/java.lang.Thread.run(Thread.java:1583) ~[na:na]

2025-05-28T22:12:17.702+09:00 ERROR 221926 --- [backend] [nio-8080-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.IllegalArgumentException: No enum constant com.example.backend.entity.StorageType.] with root cause

java.lang.IllegalArgumentException: No enum constant com.example.backend.entity.StorageType.
	at java.base/java.lang.Enum.valueOf(Enum.java:293) ~[na:na]
	at com.example.backend.entity.StorageType.valueOf(StorageType.java:3) ~[!/:0.0.1-SNAPSHOT]
	at com.example.backend.service.InventoryItemService.createItem(InventoryItemService.java:32) ~[!/:0.0.1-SNAPSHOT]
	at com.example.backend.controller.InventoryItemController.createItem(InventoryItemController.java:31) ~[!/:0.0.1-SNAPSHOT]
	at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[na:na]
	at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at com.example.backend.filter.JwtAuthenticationFilter.doFilterInternal(JwtAuthenticationFilter.java:32) ~[!/:0.0.1-SNAPSHOT]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191) ~[spring-security-web-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319) ~[spring-security-config-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243) ~[spring-webmvc-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240) ~[spring-security-config-6.5.0.jar!/:6.5.0]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar!/:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) ~[tomcat-embed-core-10.1.41.jar!/:na]
	at java.base/java.lang.Thread.run(Thread.java:1583) ~[na:na]

Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    insert 
    into
        inventory_item
        (added_at, expiration_date, inventory_id, item_name, quantity, storage_type) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        inventory_item
        (added_at, expiration_date, inventory_id, item_name, quantity, storage_type) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        inventory_item
        (added_at, expiration_date, inventory_id, item_name, quantity, storage_type) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        inventory_item
        (added_at, expiration_date, inventory_id, item_name, quantity, storage_type) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        r1_0.recipe_id,
        r1_0.content,
        r1_0.created_at,
        r1_0.title,
        r1_0.user_id 
    from
        recipe r1_0 
    where
        r1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    insert 
    into
        recipe
        (content, created_at, title, user_id) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        r1_0.recipe_id,
        r1_0.content,
        r1_0.created_at,
        r1_0.title,
        r1_0.user_id 
    from
        recipe r1_0 
    where
        r1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        r1_0.recipe_id,
        r1_0.content,
        r1_0.created_at,
        r1_0.title,
        r1_0.user_id 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=? 
        and r1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    insert 
    into
        inventory_item
        (added_at, expiration_date, inventory_id, item_name, quantity, storage_type) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        u1_0.user_id 
    from
        users u1_0 
    where
        u1_0.email=? 
    limit
        ?
Hibernate: 
    insert 
    into
        users
        (created_at, email, nickname, password) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
2025-05-28T22:42:29.348+09:00  WARN 221926 --- [backend] [nio-8080-exec-5] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Method parameter 'inventoryId': Failed to convert value of type 'java.lang.String' to required type 'java.lang.Long'; For input string: "undefined"]
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    insert 
    into
        inventory
        (created_at, inventory_name, user_user_id) 
    values
        (?, ?, ?)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    insert 
    into
        receipt
        (image_url, uploaded_at, user_id) 
    values
        (?, ?, ?)
OCR 결과 JSON:
{"version":"V2","requestId":"e06c6a86-c869-46d9-975b-a8c8e15f69de","timestamp":1748440193590,"images":[{"uid":"cd4ff477fcb14723a52b6450109e6b45","name":"receipt","inferResult":"SUCCESS","message":"SUCCESS","validationResult":{"result":"NO_REQUESTED"},"convertedImageInfo":{"width":920,"height":550,"pageIndex":0,"longImage":false},"fields":[{"valueType":"ALL","boundingPoly":{"vertices":[{"x":37.0,"y":33.0},{"x":103.0,"y":33.0},{"x":103.0,"y":67.0},{"x":37.0,"y":67.0}]},"inferText":"001","inferConfidence":1.0,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":29.0},{"x":412.0,"y":29.0},{"x":412.0,"y":71.0},{"x":131.0,"y":71.0}]},"inferText":"더건강한샌드위치햄","inferConfidence":0.9997,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":592.0,"y":36.0},{"x":611.0,"y":36.0},{"x":611.0,"y":63.0},{"x":592.0,"y":63.0}]},"inferText":"1","inferConfidence":0.9999,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":721.0,"y":30.0},{"x":847.0,"y":30.0},{"x":847.0,"y":68.0},{"x":721.0,"y":68.0}]},"inferText":"2,190원","inferConfidence":0.9999,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":76.0},{"x":389.0,"y":75.0},{"x":389.0,"y":111.0},{"x":131.0,"y":112.0}]},"inferText":"2000114202946","inferConfidence":1.0,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":36.0,"y":120.0},{"x":104.0,"y":120.0},{"x":104.0,"y":154.0},{"x":36.0,"y":154.0}]},"inferText":"002","inferConfidence":1.0,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":108.0,"y":122.0},{"x":124.0,"y":122.0},{"x":124.0,"y":137.0},{"x":108.0,"y":137.0}]},"inferText":"*","inferConfidence":0.9986,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":117.0},{"x":348.0,"y":117.0},{"x":348.0,"y":158.0},{"x":131.0,"y":158.0}]},"inferText":"재사용봉투20L","inferConfidence":0.9998,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":752.0,"y":118.0},{"x":846.0,"y":118.0},{"x":846.0,"y":156.0},{"x":752.0,"y":156.0}]},"inferText":"850원","inferConfidence":0.9999,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":593.0,"y":124.0},{"x":611.0,"y":124.0},{"x":611.0,"y":150.0},{"x":593.0,"y":150.0}]},"inferText":"1","inferConfidence":0.9999,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":164.0},{"x":389.0,"y":164.0},{"x":389.0,"y":200.0},{"x":131.0,"y":200.0}]},"inferText":"2000113844445","inferConfidence":0.9995,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":36.0,"y":207.0},{"x":103.0,"y":207.0},{"x":103.0,"y":242.0},{"x":36.0,"y":242.0}]},"inferText":"003","inferConfidence":1.0,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":132.0,"y":205.0},{"x":462.0,"y":205.0},{"x":462.0,"y":246.0},{"x":132.0,"y":246.0}]},"inferText":"서울체다SLICE치즈20","inferConfidence":0.9999,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":593.0,"y":212.0},{"x":611.0,"y":212.0},{"x":611.0,"y":238.0},{"x":593.0,"y":238.0}]},"inferText":"1","inferConfidence":0.9999,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":723.0,"y":205.0},{"x":844.0,"y":205.0},{"x":844.0,"y":244.0},{"x":723.0,"y":244.0}]},"inferText":"3,690원","inferConfidence":0.9992,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":252.0},{"x":392.0,"y":251.0},{"x":392.0,"y":287.0},{"x":131.0,"y":288.0}]},"inferText":"2000000017574","inferConfidence":0.9995,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":36.0,"y":295.0},{"x":103.0,"y":295.0},{"x":103.0,"y":330.0},{"x":36.0,"y":330.0}]},"inferText":"004","inferConfidence":1.0,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":293.0},{"x":426.0,"y":293.0},{"x":426.0,"y":336.0},{"x":131.0,"y":336.0}]},"inferText":"The좋은버터롤(8입)","inferConfidence":0.9999,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":593.0,"y":299.0},{"x":611.0,"y":299.0},{"x":611.0,"y":327.0},{"x":593.0,"y":327.0}]},"inferText":"1","inferConfidence":0.9999,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":723.0,"y":293.0},{"x":846.0,"y":293.0},{"x":846.0,"y":332.0},{"x":723.0,"y":332.0}]},"inferText":"3,290원","inferConfidence":0.997,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":340.0},{"x":393.0,"y":339.0},{"x":393.0,"y":374.0},{"x":131.0,"y":375.0}]},"inferText":"2000059581753","inferConfidence":0.9999,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":36.0,"y":382.0},{"x":105.0,"y":382.0},{"x":105.0,"y":419.0},{"x":36.0,"y":419.0}]},"inferText":"005","inferConfidence":1.0,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":108.0,"y":384.0},{"x":125.0,"y":384.0},{"x":125.0,"y":401.0},{"x":108.0,"y":401.0}]},"inferText":"*","inferConfidence":0.9997,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":380.0},{"x":382.0,"y":380.0},{"x":382.0,"y":421.0},{"x":131.0,"y":421.0}]},"inferText":"속편한우유저지방","inferConfidence":1.0,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":721.0,"y":381.0},{"x":847.0,"y":381.0},{"x":847.0,"y":420.0},{"x":721.0,"y":420.0}]},"inferText":"4,280원","inferConfidence":0.9993,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":593.0,"y":387.0},{"x":611.0,"y":387.0},{"x":611.0,"y":414.0},{"x":593.0,"y":414.0}]},"inferText":"1","inferConfidence":0.9999,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":427.0},{"x":392.0,"y":427.0},{"x":392.0,"y":462.0},{"x":131.0,"y":462.0}]},"inferText":"2000129100273","inferConfidence":0.9998,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":36.0,"y":470.0},{"x":104.0,"y":470.0},{"x":104.0,"y":507.0},{"x":36.0,"y":507.0}]},"inferText":"006","inferConfidence":1.0,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":467.0},{"x":291.0,"y":467.0},{"x":291.0,"y":510.0},{"x":131.0,"y":510.0}]},"inferText":"주부초밥짱","inferConfidence":0.9998,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":592.0,"y":474.0},{"x":612.0,"y":474.0},{"x":612.0,"y":503.0},{"x":592.0,"y":503.0}]},"inferText":"1","inferConfidence":0.9999,"type":"NORMAL","lineBreak":false},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":723.0,"y":468.0},{"x":844.0,"y":468.0},{"x":844.0,"y":507.0},{"x":723.0,"y":507.0}]},"inferText":"3,290원","inferConfidence":0.9968,"type":"NORMAL","lineBreak":true},{"valueType":"ALL","boundingPoly":{"vertices":[{"x":131.0,"y":515.0},{"x":392.0,"y":515.0},{"x":392.0,"y":550.0},{"x":131.0,"y":550.0}]},"inferText":"2000121938498","inferConfidence":0.9997,"type":"NORMAL","lineBreak":true}]}]}
Hibernate: 
    insert 
    into
        parsed_item
        (item_name, quantity, receipt_id) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        parsed_item
        (item_name, quantity, receipt_id) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        parsed_item
        (item_name, quantity, receipt_id) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        parsed_item
        (item_name, quantity, receipt_id) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        parsed_item
        (item_name, quantity, receipt_id) 
    values
        (?, ?, ?)
Hibernate: 
    insert 
    into
        parsed_item
        (item_name, quantity, receipt_id) 
    values
        (?, ?, ?)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        pi1_0.parsed_item_id,
        pi1_0.item_name,
        pi1_0.quantity,
        pi1_0.receipt_id 
    from
        parsed_item pi1_0 
    left join
        receipt r1_0 
            on r1_0.receipt_id=pi1_0.receipt_id 
    where
        r1_0.receipt_id=?
Hibernate: 
    select
        r1_0.receipt_id,
        r1_0.image_url,
        r1_0.uploaded_at,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        receipt r1_0 
    left join
        users u1_0 
            on u1_0.user_id=r1_0.user_id 
    where
        r1_0.receipt_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    insert 
    into
        inventory_item
        (added_at, expiration_date, inventory_id, item_name, quantity, storage_type) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        inventory_item
        (added_at, expiration_date, inventory_id, item_name, quantity, storage_type) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        inventory_item
        (added_at, expiration_date, inventory_id, item_name, quantity, storage_type) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    insert 
    into
        inventory_item
        (added_at, expiration_date, inventory_id, item_name, quantity, storage_type) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    insert 
    into
        inventory_item
        (added_at, expiration_date, inventory_id, item_name, quantity, storage_type) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    insert 
    into
        inventory_item
        (added_at, expiration_date, inventory_id, item_name, quantity, storage_type) 
    values
        (?, ?, ?, ?, ?, ?)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    left join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        ii1_0.item_id=?
Hibernate: 
    update
        inventory_item 
    set
        added_at=?,
        expiration_date=?,
        inventory_id=?,
        item_name=?,
        quantity=?,
        storage_type=? 
    where
        item_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    left join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        ii1_0.item_id=?
Hibernate: 
    select
        uir1_0.item_id,
        uir1_0.id,
        r1_0.recipe_id,
        r1_0.content,
        r1_0.created_at,
        r1_0.title,
        r1_0.user_id 
    from
        recipe_source_item uir1_0 
    left join
        recipe r1_0 
            on r1_0.recipe_id=uir1_0.recipe_id 
    where
        uir1_0.item_id=?
Hibernate: 
    delete 
    from
        inventory_item 
    where
        item_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        r1_0.recipe_id,
        r1_0.content,
        r1_0.created_at,
        r1_0.title,
        r1_0.user_id 
    from
        recipe r1_0 
    where
        r1_0.user_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    insert 
    into
        recipe
        (content, created_at, title, user_id) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        r1_0.recipe_id,
        r1_0.content,
        r1_0.created_at,
        r1_0.title,
        r1_0.user_id 
    from
        recipe r1_0 
    where
        r1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        r1_0.recipe_id,
        r1_0.content,
        r1_0.created_at,
        r1_0.title,
        r1_0.user_id 
    from
        recipe r1_0 
    where
        r1_0.recipe_id=? 
        and r1_0.user_id=?
Hibernate: 
    insert 
    into
        recipe
        (content, created_at, title, user_id) 
    values
        (?, ?, ?, ?)
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        r1_0.recipe_id,
        r1_0.content,
        r1_0.created_at,
        r1_0.title,
        r1_0.user_id 
    from
        recipe r1_0 
    where
        r1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        ii1_0.item_id,
        ii1_0.added_at,
        ii1_0.expiration_date,
        ii1_0.inventory_id,
        ii1_0.item_name,
        ii1_0.quantity,
        ii1_0.storage_type 
    from
        inventory_item ii1_0 
    left join
        inventory i1_0 
            on i1_0.inventory_id=ii1_0.inventory_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id,
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        inventory i1_0 
    join
        users u1_0 
            on u1_0.user_id=i1_0.user_user_id 
    where
        i1_0.inventory_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        i1_0.inventory_id,
        i1_0.created_at,
        i1_0.inventory_name,
        i1_0.user_user_id 
    from
        inventory i1_0 
    where
        i1_0.user_user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.user_id=?
Hibernate: 
    select
        u1_0.user_id,
        u1_0.created_at,
        u1_0.email,
        u1_0.nickname,
        u1_0.password 
    from
        users u1_0 
    where
        u1_0.email=?
Hibernate: 
    select
        r1_0.recipe_id,
        r1_0.content,
        r1_0.created_at,
        r1_0.title,
        r1_0.user_id 
    from
        recipe r1_0 
    where
        r1_0.user_id=?
